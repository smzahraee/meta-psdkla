From 920ea66bd360c0ae31d9fc7e0b121e687b3fbaca Mon Sep 17 00:00:00 2001
From: Shyam Jagannathan <a0393891@ti.com>
Date: Mon, 5 Oct 2020 09:10:32 +0530
Subject: [PATCH] Optimal QoS Configuration

- In a multi-initiator use-case the defaults in the SoC to arbitrate system traffic is not sufficient
- Systematic analysis of various traffic on the basis of type, route and priority is critical to reach device entitlement performance
- These settings are arrived at after multiple iterations of tuning the AVP4 use-case (Auto Valet Parking) which comprise of multiple initiators
- CSI-Rx (RT), VISS, LDC, MSC, DOF, C66x_1, C66_2, C71x, GPU, ENC, DSS (RT), Main R5F 2_0(RT), Main R5F 2_1 (RT) are the participating initiators in AVP4 use-case

At a high level, the below is required
- Mark accelerator traffic as atype=3 which makes the traffic take the non-coherent path and not contest with coherent traffic from A72/C71x
- Spread out the order ID in the NRT for a more streamlined traffic, mark capture, display and scheduler (Main R5F) as RT
- Spread out the priority, give higher priority to RT and lower to NRT

Without these settings a representative valet-parking use-case like AVP4 cannot meet realtime constraints.
These values are required to be programmed at SPL in Linux before all the cores and drivers come up.
---
 arch/arm/mach-k3/include/mach/hardware.h      |   1 +
 .../arm/mach-k3/include/mach/j721e_hardware.h | 167 ++++++++--
 .../mach-k3/include/mach/j721e_qos_params.h   |  63 ++++
 arch/arm/mach-k3/j721e_init.c                 | 287 ++++++++++++++++--
 drivers/ram/k3-j721e/k3-j721e-ddrss.c         |  27 ++
 5 files changed, 492 insertions(+), 53 deletions(-)
 create mode 100644 arch/arm/mach-k3/include/mach/j721e_qos_params.h

diff --git a/arch/arm/mach-k3/include/mach/hardware.h b/arch/arm/mach-k3/include/mach/hardware.h
index 301331c90a..38aea69170 100644
--- a/arch/arm/mach-k3/include/mach/hardware.h
+++ b/arch/arm/mach-k3/include/mach/hardware.h
@@ -12,6 +12,7 @@
 
 #ifdef CONFIG_SOC_K3_J721E
 #include "j721e_hardware.h"
+#include "j721e_qos_params.h"
 #endif
 
 /* Assuming these addresses and definitions stay common across K3 devices */
diff --git a/arch/arm/mach-k3/include/mach/j721e_hardware.h b/arch/arm/mach-k3/include/mach/j721e_hardware.h
index 5cb987a931..7b2cfc686d 100644
--- a/arch/arm/mach-k3/include/mach/j721e_hardware.h
+++ b/arch/arm/mach-k3/include/mach/j721e_hardware.h
@@ -60,33 +60,150 @@
 #define TI_SRAM_SCRATCH_BOARD_EEPROM_START	CONFIG_SYS_K3_MCU_SCRATCHPAD_BASE
 
 /* CBASS */
-#define QOS_DSS0_DMA				0x45dc2000
-#define QOS_DSS0_DMA_CBASS_GRP_MAP1(j)		(QOS_DSS0_DMA + 0x0 + (j) * 8)
-#define QOS_DSS0_DMA_CBASS_GRP_MAP2(j)		(QOS_DSS0_DMA + 0x4 + (j) * 8)
-#define QOS_DSS0_DMA_CBASS_MAP(i)		(QOS_DSS0_DMA + 0x100 + (i) * 4)
 
-#define QOS_DSS0_FBDC				0x45dc2400
-#define QOS_DSS0_FBDC_CBASS_GRP_MAP1(j)		(QOS_DSS0_FBDC + 0x0 + (j) * 8)
-#define QOS_DSS0_FBDC_CBASS_GRP_MAP2(j)		(QOS_DSS0_FBDC + 0x4 + (j) * 8)
-#define QOS_DSS0_FBDC_CBASS_MAP(i)		(QOS_DSS0_FBDC + 0x100 + (i) * 4)
-
-#define QOS_MMC0_RD_CBASS_MAP(i)		(0x45d9a100 + (i) * 4)
-#define QOS_MMC0_WR_CBASS_MAP(i)		(0x45d9a500 + (i) * 4)
-#define QOS_MMC1_RD_CBASS_MAP(i)		(0x45d82100 + (i) * 4)
-#define QOS_MMC1_WR_CBASS_MAP(i)		(0x45d82500 + (i) * 4)
-
-#define QOS_GPU_M0_RD_CBASS_MAP(i)		(0x45dc5100 + (i) * 4)
-#define QOS_GPU_M0_WR_CBASS_MAP(i)		(0x45dc5900 + (i) * 4)
-#define QOS_GPU_M1_RD_CBASS_MAP(i)		(0x45dc6100 + (i) * 4)
-#define QOS_GPU_M1_WR_CBASS_MAP(i)		(0x45dc6900 + (i) * 4)
-
-#define QOS_D5520_RD_CBASS_MAP(i)		(0x45dc0500 + (i) * 4)
-#define QOS_D5520_WR_CBASS_MAP(i)		(0x45dc0900 + (i) * 4)
+#define QOS_C66SS0_MDMA                             0x45d81000
+#define QOS_C66SS0_MDMA_NUM_J_CH                    3
+#define QOS_C66SS0_MDMA_NUM_I_CH                    1
+#define QOS_C66SS0_MDMA_CBASS_GRP_MAP1(j)           (QOS_C66SS0_MDMA + 0x0 + (j) * 8)
+#define QOS_C66SS0_MDMA_CBASS_GRP_MAP2(j)           (QOS_C66SS0_MDMA + 0x4 + (j) * 8)
+#define QOS_C66SS0_MDMA_CBASS_MAP(i)                (QOS_C66SS0_MDMA + 0x100 + (i) * 4)
+
+#define QOS_C66SS1_MDMA                             0x45d81400
+#define QOS_C66SS1_MDMA_NUM_J_CH                    3
+#define QOS_C66SS1_MDMA_NUM_I_CH                    1
+#define QOS_C66SS1_MDMA_CBASS_GRP_MAP1(j)           (QOS_C66SS1_MDMA + 0x0 + (j) * 8)
+#define QOS_C66SS1_MDMA_CBASS_GRP_MAP2(j)           (QOS_C66SS1_MDMA + 0x4 + (j) * 8)
+#define QOS_C66SS1_MDMA_CBASS_MAP(i)                (QOS_C66SS1_MDMA + 0x100 + (i) * 4)
+
+#define QOS_R5FSS0_CORE0_MEM_RD                     0x45d84000
+#define QOS_R5FSS0_CORE0_MEM_RD_NUM_J_CH            3
+#define QOS_R5FSS0_CORE0_MEM_RD_NUM_I_CH            1
+#define QOS_R5FSS0_CORE0_MEM_RD_CBASS_GRP_MAP1(j)   (QOS_R5FSS0_CORE0_MEM_RD + 0x0 + (j) * 8)
+#define QOS_R5FSS0_CORE0_MEM_RD_CBASS_GRP_MAP2(j)   (QOS_R5FSS0_CORE0_MEM_RD + 0x4 + (j) * 8)
+#define QOS_R5FSS0_CORE0_MEM_RD_CBASS_MAP(i)        (QOS_R5FSS0_CORE0_MEM_RD + 0x100 + (i) * 4)
+
+#define QOS_R5FSS0_CORE1_MEM_RD                     0x45d84400
+#define QOS_R5FSS0_CORE1_MEM_RD_NUM_J_CH            3
+#define QOS_R5FSS0_CORE1_MEM_RD_NUM_I_CH            1
+#define QOS_R5FSS0_CORE1_MEM_RD_CBASS_GRP_MAP1(j)   (QOS_R5FSS0_CORE1_MEM_RD + 0x0 + (j) * 8)
+#define QOS_R5FSS0_CORE1_MEM_RD_CBASS_GRP_MAP2(j)   (QOS_R5FSS0_CORE1_MEM_RD + 0x4 + (j) * 8)
+#define QOS_R5FSS0_CORE1_MEM_RD_CBASS_MAP(i)        (QOS_R5FSS0_CORE1_MEM_RD + 0x100 + (i) * 4)
+
+#define QOS_R5FSS0_CORE0_MEM_WR                     0x45d84800
+#define QOS_R5FSS0_CORE0_MEM_WR_NUM_J_CH            3
+#define QOS_R5FSS0_CORE0_MEM_WR_NUM_I_CH            1
+#define QOS_R5FSS0_CORE0_MEM_WR_CBASS_GRP_MAP1(j)   (QOS_R5FSS0_CORE0_MEM_WR + 0x0 + (j) * 8)
+#define QOS_R5FSS0_CORE0_MEM_WR_CBASS_GRP_MAP2(j)   (QOS_R5FSS0_CORE0_MEM_WR + 0x4 + (j) * 8)
+#define QOS_R5FSS0_CORE0_MEM_WR_CBASS_MAP(i)        (QOS_R5FSS0_CORE0_MEM_WR + 0x100 + (i) * 4)
+
+#define QOS_R5FSS0_CORE1_MEM_WR                     0x45d84C00
+#define QOS_R5FSS0_CORE1_MEM_WR_NUM_J_CH            3
+#define QOS_R5FSS0_CORE1_MEM_WR_NUM_I_CH            1
+#define QOS_R5FSS0_CORE1_MEM_WR_CBASS_GRP_MAP1(j)   (QOS_R5FSS0_CORE1_MEM_WR + 0x0 + (j) * 8)
+#define QOS_R5FSS0_CORE1_MEM_WR_CBASS_GRP_MAP2(j)   (QOS_R5FSS0_CORE1_MEM_WR + 0x4 + (j) * 8)
+#define QOS_R5FSS0_CORE1_MEM_WR_CBASS_MAP(i)        (QOS_R5FSS0_CORE1_MEM_WR + 0x100 + (i) * 4)
+
+#define QOS_ENCODER0_WR                             0x45dc1000
+#define QOS_ENCODER0_WR_NUM_J_CH                    2
+#define QOS_ENCODER0_WR_NUM_I_CH                    5
+#define QOS_ENCODER0_WR_CBASS_GRP_MAP1(j)           (QOS_ENCODER0_WR + 0x0 + (j) * 8)
+#define QOS_ENCODER0_WR_CBASS_GRP_MAP2(j)           (QOS_ENCODER0_WR + 0x4 + (j) * 8)
+#define QOS_ENCODER0_WR_CBASS_MAP(i)                (QOS_ENCODER0_WR + 0x100 + (i) * 4)
+
+#define QOS_DECODER0_RD                             0x45dc0400
+#define QOS_DECODER0_RD_NUM_J_CH                    2
+#define QOS_DECODER0_RD_NUM_I_CH                    1
+#define QOS_DECODER0_RD_CBASS_GRP_MAP1(j)           (QOS_DECODER0_RD + 0x0 + (j) * 8)
+#define QOS_DECODER0_RD_CBASS_GRP_MAP2(j)           (QOS_DECODER0_RD + 0x4 + (j) * 8)
+#define QOS_DECODER0_RD_CBASS_MAP(i)                (QOS_DECODER0_RD + 0x100 + (i) * 4)
+
+#define QOS_DECODER0_WR                             0x45dc0800
+#define QOS_DECODER0_WR_NUM_J_CH                    2
+#define QOS_DECODER0_WR_NUM_I_CH                    1
+#define QOS_DECODER0_WR_CBASS_GRP_MAP1(j)           (QOS_DECODER0_WR + 0x0 + (j) * 8)
+#define QOS_DECODER0_WR_CBASS_GRP_MAP2(j)           (QOS_DECODER0_WR + 0x4 + (j) * 8)
+#define QOS_DECODER0_WR_CBASS_MAP(i)                (QOS_DECODER0_WR + 0x100 + (i) * 4)
+
+#define QOS_VPAC0_DATA0                             0x45dc1500
+#define QOS_VPAC0_DATA0_NUM_I_CH                    32
+#define QOS_VPAC0_DATA0_CBASS_MAP(i)                (QOS_VPAC0_DATA0 + (i) * 4)
+
+#define QOS_DMPAC0_DATA                             0x45dc0100
+#define QOS_DMPAC0_DATA_NUM_I_CH                    32
+#define QOS_DMPAC0_DATA_CBASS_MAP(i)                (QOS_DMPAC0_DATA + (i) * 4)
+
+#define QOS_ENCODER0_RD                             0x45dc0c00
+#define QOS_ENCODER0_RD_NUM_J_CH                    2
+#define QOS_ENCODER0_RD_NUM_I_CH                    5
+#define QOS_ENCODER0_RD_CBASS_GRP_MAP1(j)           (QOS_ENCODER0_RD + 0x0 + (j) * 8)
+#define QOS_ENCODER0_RD_CBASS_GRP_MAP2(j)           (QOS_ENCODER0_RD + 0x4 + (j) * 8)
+#define QOS_ENCODER0_RD_CBASS_MAP(i)                (QOS_ENCODER0_RD + 0x100 + (i) * 4)
+
+#define QOS_VPAC0_DATA1                             0x45dc1900
+#define QOS_VPAC0_DATA1_NUM_I_CH                    64
+#define QOS_VPAC0_DATA1_CBASS_MAP(i)                (QOS_VPAC0_DATA1 + (i) * 4)
+
+#define QOS_VPAC0_LDC0                              0x45dc1c00
+#define QOS_VPAC0_LDC0_NUM_J_CH                     2
+#define QOS_VPAC0_LDC0_NUM_I_CH                     3
+#define QOS_VPAC0_LDC0_CBASS_GRP_MAP1(j)            (QOS_VPAC0_LDC0 + 0x0 + (j) * 8)
+#define QOS_VPAC0_LDC0_CBASS_GRP_MAP2(j)            (QOS_VPAC0_LDC0 + 0x4 + (j) * 8)
+#define QOS_VPAC0_LDC0_CBASS_MAP(i)                 (QOS_VPAC0_LDC0 + 0x100 + (i) * 4)
+
+#define QOS_DSS0_DMA                                0x45dc2000
+#define QOS_DSS0_DMA_NUM_J_CH                       2
+#define QOS_DSS0_DMA_NUM_I_CH                       10
+#define QOS_DSS0_DMA_CBASS_GRP_MAP1(j)              (QOS_DSS0_DMA + 0x0 + (j) * 8)
+#define QOS_DSS0_DMA_CBASS_GRP_MAP2(j)              (QOS_DSS0_DMA + 0x4 + (j) * 8)
+#define QOS_DSS0_DMA_CBASS_MAP(i)                   (QOS_DSS0_DMA + 0x100 + (i) * 4)
+
+#define QOS_DSS0_FBDC                               0x45dc2400
+#define QOS_DSS0_FBDC_NUM_J_CH                      2
+#define QOS_DSS0_FBDC_NUM_I_CH                      10
+#define QOS_DSS0_FBDC_CBASS_GRP_MAP1(j)             (QOS_DSS0_FBDC + 0x0 + (j) * 8)
+#define QOS_DSS0_FBDC_CBASS_GRP_MAP2(j)             (QOS_DSS0_FBDC + 0x4 + (j) * 8)
+#define QOS_DSS0_FBDC_CBASS_MAP(i)                  (QOS_DSS0_FBDC + 0x100 + (i) * 4)
+
+#define QOS_GPU0_M0_RD                              0x45dc5000
+#define QOS_GPU0_M0_RD_NUM_J_CH                     2
+#define QOS_GPU0_M0_RD_NUM_I_CH                     48
+#define QOS_GPU0_M0_RD_CBASS_GRP_MAP1(j)            (QOS_GPU0_M0_RD + 0x0 + (j) * 8)
+#define QOS_GPU0_M0_RD_CBASS_GRP_MAP2(j)            (QOS_GPU0_M0_RD + 0x4 + (j) * 8)
+#define QOS_GPU0_M0_RD_CBASS_MAP(i)                 (QOS_GPU0_M0_RD + 0x100 + (i) * 4)
+
+#define QOS_GPU0_M0_WR                              0x45dc5800
+#define QOS_GPU0_M0_WR_NUM_J_CH                     2
+#define QOS_GPU0_M0_WR_NUM_I_CH                     48
+#define QOS_GPU0_M0_WR_CBASS_GRP_MAP1(j)            (QOS_GPU0_M0_WR + 0x0 + (j) * 8)
+#define QOS_GPU0_M0_WR_CBASS_GRP_MAP2(j)            (QOS_GPU0_M0_WR + 0x4 + (j) * 8)
+#define QOS_GPU0_M0_WR_CBASS_MAP(i)                 (QOS_GPU0_M0_WR + 0x100 + (i) * 4)
+
+#define QOS_GPU0_M1_RD                              0x45dc6000
+#define QOS_GPU0_M1_RD_NUM_J_CH                     2
+#define QOS_GPU0_M1_RD_NUM_I_CH                     48
+#define QOS_GPU0_M1_RD_CBASS_GRP_MAP1(j)            (QOS_GPU0_M1_RD + 0x0 + (j) * 8)
+#define QOS_GPU0_M1_RD_CBASS_GRP_MAP2(j)            (QOS_GPU0_M1_RD + 0x4 + (j) * 8)
+#define QOS_GPU0_M1_RD_CBASS_MAP(i)                 (QOS_GPU0_M1_RD + 0x100 + (i) * 4)
+
+#define QOS_GPU0_M1_WR                              0x45dc6800
+#define QOS_GPU0_M1_WR_NUM_J_CH                     2
+#define QOS_GPU0_M1_WR_NUM_I_CH                     48
+#define QOS_GPU0_M1_WR_CBASS_GRP_MAP1(j)            (QOS_GPU0_M1_WR + 0x0 + (j) * 8)
+#define QOS_GPU0_M1_WR_CBASS_GRP_MAP2(j)            (QOS_GPU0_M1_WR + 0x4 + (j) * 8)
+#define QOS_GPU0_M1_WR_CBASS_MAP(i)                 (QOS_GPU0_M1_WR + 0x100 + (i) * 4)
+
+#define QOS_MMC0_RD_CBASS_MAP(i)                    (0x45d9a100 + (i) * 4)
+#define QOS_MMC0_WR_CBASS_MAP(i)                    (0x45d9a500 + (i) * 4)
+#define QOS_MMC1_RD_CBASS_MAP(i)                    (0x45d82100 + (i) * 4)
+#define QOS_MMC1_WR_CBASS_MAP(i)                    (0x45d82500 + (i) * 4)
+
+#define QOS_D5520_RD_CBASS_MAP(i)                   (0x45dc0500 + (i) * 4)
+#define QOS_D5520_WR_CBASS_MAP(i)                   (0x45dc0900 + (i) * 4)
 
 /* NAVSS North Bridge (NB) */
-#define NAVSS0_NBSS_NB0_CFG_MMRS		0x3802000
-#define NAVSS0_NBSS_NB1_CFG_MMRS		0x3803000
-#define NAVSS0_NBSS_NB0_CFG_NB_THREADMAP	(NAVSS0_NBSS_NB0_CFG_MMRS + 0x10)
-#define NAVSS0_NBSS_NB1_CFG_NB_THREADMAP	(NAVSS0_NBSS_NB1_CFG_MMRS + 0x10)
+#define NAVSS0_NBSS_NB0_CFG_MMRS                    0x3802000
+#define NAVSS0_NBSS_NB1_CFG_MMRS                    0x3803000
+#define NAVSS0_NBSS_NB0_CFG_NB_THREADMAP            (NAVSS0_NBSS_NB0_CFG_MMRS + 0x10)
+#define NAVSS0_NBSS_NB1_CFG_NB_THREADMAP            (NAVSS0_NBSS_NB1_CFG_MMRS + 0x10)
 
 #endif /* __ASM_ARCH_J721E_HARDWARE_H */
diff --git a/arch/arm/mach-k3/include/mach/j721e_qos_params.h b/arch/arm/mach-k3/include/mach/j721e_qos_params.h
new file mode 100644
index 0000000000..fb06d8d314
--- /dev/null
+++ b/arch/arm/mach-k3/include/mach/j721e_qos_params.h
@@ -0,0 +1,63 @@
+#ifndef __J721E_QOS_PARAMS_H
+#define __J721E_QOS_PARAMS_H
+
+#define QOS_C66SS0_MDMA_ATYPE                (0U)
+#define QOS_C66SS1_MDMA_ATYPE                (0U)
+#define QOS_VPAC0_DATA0_ATYPE                (0U)
+#define QOS_VPAC0_DATA1_ATYPE                (0U)
+#define QOS_VPAC0_LDC0_ATYPE                 (0U)
+#define QOS_DMPAC0_DATA_ATYPE                (0U)
+#define QOS_DSS0_DMA_ATYPE                   (0U)
+#define QOS_DSS0_FBDC_ATYPE                  (0U)
+#define QOS_GPU0_M0_RD_ATYPE                 (0U)
+#define QOS_GPU0_M0_WR_ATYPE                 (0U)
+#define QOS_GPU0_M1_RD_ATYPE                 (0U)
+#define QOS_GPU0_M1_WR_ATYPE                 (0U)
+#define QOS_ENCODER0_RD_ATYPE                (0U)
+#define QOS_ENCODER0_WR_ATYPE                (0U)
+#define QOS_DECODER0_RD_ATYPE                (0U)
+#define QOS_DECODER0_WR_ATYPE                (0U)
+#define QOS_R5FSS0_CORE0_MEM_RD_ATYPE        (0U)
+#define QOS_R5FSS0_CORE0_MEM_WR_ATYPE        (0U)
+#define QOS_R5FSS0_CORE1_MEM_RD_ATYPE        (0U)
+#define QOS_R5FSS0_CORE1_MEM_WR_ATYPE        (0U)
+
+#define QOS_VPAC0_LDC0_ORDER_ID              (1U)
+#define QOS_C66SS0_MDMA_ORDER_ID             (5U)
+#define QOS_C66SS1_MDMA_ORDER_ID             (5U)
+#define QOS_ENCODER0_RD_ORDER_ID             (6U)
+#define QOS_ENCODER0_WR_ORDER_ID             (6U)
+#define QOS_DECODER0_RD_ORDER_ID             (6U)
+#define QOS_DECODER0_WR_ORDER_ID             (6U)
+#define QOS_GPU0_M0_RD_ORDER_ID              (7U)
+#define QOS_GPU0_M0_WR_ORDER_ID              (7U)
+#define QOS_GPU0_M1_RD_ORDER_ID              (7U)
+#define QOS_GPU0_M1_WR_ORDER_ID              (7U)
+#define QOS_DSS0_DMA_ORDER_ID                (9U)
+#define QOS_DSS0_FBDC_ORDER_ID               (9U)
+#define QOS_R5FSS0_CORE0_MEM_RD_ORDER_ID     (11U)
+#define QOS_R5FSS0_CORE0_MEM_WR_ORDER_ID     (11U)
+#define QOS_R5FSS0_CORE1_MEM_RD_ORDER_ID     (11U)
+#define QOS_R5FSS0_CORE1_MEM_WR_ORDER_ID     (11U)
+
+#define QOS_DSS0_DMA_PRIORITY                (1U)
+#define QOS_DSS0_FBDC_PRIORITY               (1U)
+#define QOS_VPAC0_LDC0_PRIORITY              (3U)
+#define QOS_C66SS0_MDMA_PRIORITY             (5U)
+#define QOS_C66SS1_MDMA_PRIORITY             (5U)
+#define QOS_ENCODER0_RD_PRIORITY             (6U)
+#define QOS_ENCODER0_WR_PRIORITY             (6U)
+#define QOS_DECODER0_RD_PRIORITY             (6U)
+#define QOS_DECODER0_WR_PRIORITY             (6U)
+#define QOS_GPU0_M0_RD_MMU_PRIORITY          (3U)
+#define QOS_GPU0_M0_RD_PRIORITY              (7U)
+#define QOS_GPU0_M0_WR_PRIORITY              (7U)
+#define QOS_GPU0_M1_RD_PRIORITY              (7U)
+#define QOS_GPU0_M1_RD_MMU_PRIORITY          (3U)
+#define QOS_GPU0_M1_WR_PRIORITY              (7U)
+#define QOS_R5FSS0_CORE0_MEM_RD_PRIORITY     (2U)
+#define QOS_R5FSS0_CORE0_MEM_WR_PRIORITY     (2U)
+#define QOS_R5FSS0_CORE1_MEM_RD_PRIORITY     (2U)
+#define QOS_R5FSS0_CORE1_MEM_WR_PRIORITY     (2U)
+
+#endif
diff --git a/arch/arm/mach-k3/j721e_init.c b/arch/arm/mach-k3/j721e_init.c
index 41921fe414..f77b609980 100644
--- a/arch/arm/mach-k3/j721e_init.c
+++ b/arch/arm/mach-k3/j721e_init.c
@@ -90,10 +90,10 @@ void setup_initiator_credentials(void)
 
 	/* GPU OS_id = 0 uses chanid = [0-3] */
 	for (i = 0; i < 4; i++) {
-		cbass_qos_rmw(QOS_GPU_M0_RD_CBASS_MAP(i), QOS_PVU_CTX(2), mask);
-		cbass_qos_rmw(QOS_GPU_M0_WR_CBASS_MAP(i), QOS_PVU_CTX(2), mask);
-		cbass_qos_rmw(QOS_GPU_M1_RD_CBASS_MAP(i), QOS_PVU_CTX(2), mask);
-		cbass_qos_rmw(QOS_GPU_M1_WR_CBASS_MAP(i), QOS_PVU_CTX(2), mask);
+		cbass_qos_rmw(QOS_GPU0_M0_RD_CBASS_MAP(i), QOS_PVU_CTX(2), mask);
+		cbass_qos_rmw(QOS_GPU0_M0_WR_CBASS_MAP(i), QOS_PVU_CTX(2), mask);
+		cbass_qos_rmw(QOS_GPU0_M1_RD_CBASS_MAP(i), QOS_PVU_CTX(2), mask);
+		cbass_qos_rmw(QOS_GPU0_M1_WR_CBASS_MAP(i), QOS_PVU_CTX(2), mask);
 	}
 
 	/* D5520 chanid=[0-1] */
@@ -113,10 +113,10 @@ void setup_initiator_credentials(void)
 
 	/* GPU OS_id = 1 uses chanid = [4-7] */
 	for (i = 4; i < 8; i++) {
-		cbass_qos_rmw(QOS_GPU_M0_RD_CBASS_MAP(i), QOS_PVU_CTX(3), mask);
-		cbass_qos_rmw(QOS_GPU_M0_WR_CBASS_MAP(i), QOS_PVU_CTX(3), mask);
-		cbass_qos_rmw(QOS_GPU_M1_RD_CBASS_MAP(i), QOS_PVU_CTX(3), mask);
-		cbass_qos_rmw(QOS_GPU_M1_WR_CBASS_MAP(i), QOS_PVU_CTX(3), mask);
+		cbass_qos_rmw(QOS_GPU0_M0_RD_CBASS_MAP(i), QOS_PVU_CTX(3), mask);
+		cbass_qos_rmw(QOS_GPU0_M0_WR_CBASS_MAP(i), QOS_PVU_CTX(3), mask);
+		cbass_qos_rmw(QOS_GPU0_M1_RD_CBASS_MAP(i), QOS_PVU_CTX(3), mask);
+		cbass_qos_rmw(QOS_GPU0_M1_WR_CBASS_MAP(i), QOS_PVU_CTX(3), mask);
 	}
 }
 
@@ -184,7 +184,49 @@ void setup_navss_nb(void)
 	writel(2, NAVSS0_NBSS_NB1_CFG_NB_THREADMAP);
 }
 
-void setup_dss_credentials(void)
+#endif
+
+void setup_vpac_qos(void)
+{
+	unsigned int channel, group;
+
+	/* vpac data master 0  */
+	for (channel = 0; channel < QOS_VPAC0_DATA0_NUM_I_CH; ++channel) {
+
+		writel((QOS_VPAC0_DATA0_ATYPE << 28), (uintptr_t)QOS_VPAC0_DATA0_CBASS_MAP(channel));
+	}
+
+	/* vpac data master 1  */
+	for (channel = 0; channel < QOS_VPAC0_DATA1_NUM_I_CH; ++channel) {
+
+		writel((QOS_VPAC0_DATA1_ATYPE << 28), (uintptr_t)QOS_VPAC0_DATA1_CBASS_MAP(channel));
+	}
+
+	/* vpac ldc0  */
+	for (group = 0; group < QOS_VPAC0_LDC0_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_VPAC0_LDC0_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_VPAC0_LDC0_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_VPAC0_LDC0_NUM_I_CH; ++channel) {
+
+		writel((QOS_VPAC0_LDC0_ATYPE << 28) | (QOS_VPAC0_LDC0_PRIORITY << 12) | (QOS_VPAC0_LDC0_ORDER_ID << 4), (uintptr_t)QOS_VPAC0_LDC0_CBASS_MAP(channel));
+	}
+
+}
+
+void setup_dmpac_qos(void)
+{
+	unsigned int channel;
+
+	/* dmpac data  */
+	for (channel = 0; channel < QOS_DMPAC0_DATA_NUM_I_CH; ++channel) {
+
+		writel((QOS_DMPAC0_DATA_ATYPE << 28), (uintptr_t)QOS_DMPAC0_DATA_CBASS_MAP(channel));
+	}
+}
+
+void setup_dss_qos(void)
 {
 	unsigned int channel, group;
 
@@ -193,38 +235,221 @@ void setup_dss_credentials(void)
 	/* 10 channels: (pipe << 1) | is_second_buffer */
 
 	/* master port 1 (dma) */
+	for (group = 0; group < QOS_DSS0_DMA_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_DSS0_DMA_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_DSS0_DMA_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_DSS0_DMA_NUM_I_CH; ++channel) {
 
-	for (group = 0; group < 2; ++group) {
-		writel(0x76543210, QOS_DSS0_DMA_CBASS_GRP_MAP1(group));
-		writel(0xfedcba98, QOS_DSS0_DMA_CBASS_GRP_MAP2(group));
+		writel((QOS_DSS0_DMA_ATYPE << 28) | (QOS_DSS0_DMA_PRIORITY << 12) | (QOS_DSS0_DMA_ORDER_ID << 4), (uintptr_t)QOS_DSS0_DMA_CBASS_MAP(channel));
 	}
 
-	for (channel = 0; channel < 10; ++channel) {
-		u8 orderid;
-		u8 atype = 0;
+	/* master port 2 (fbdc) */
+	for (group = 0; group < QOS_DSS0_FBDC_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_DSS0_FBDC_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_DSS0_FBDC_CBASS_GRP_MAP2(group));
+	}
 
-		orderid = 0xf - channel;
+	for (channel = 0; channel < QOS_DSS0_FBDC_NUM_I_CH; ++channel) {
 
-		writel((atype << 28) | (orderid << 4), QOS_DSS0_DMA_CBASS_MAP(channel));
+		writel((QOS_DSS0_FBDC_ATYPE << 28) | (QOS_DSS0_FBDC_PRIORITY << 12) | (QOS_DSS0_FBDC_ORDER_ID << 4), (uintptr_t)QOS_DSS0_FBDC_CBASS_MAP(channel));
 	}
+}
 
-	/* master port 2 (fbdc) */
+void setup_gpu_qos(void)
+{
+	unsigned int channel, group;
+
+	/* gpu m0 rd */
+	for (group = 0; group < QOS_GPU0_M0_RD_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_GPU0_M0_RD_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_GPU0_M0_RD_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_GPU0_M0_RD_NUM_I_CH; ++channel) {
+
+		if(channel == 0)
+		{
+			writel((QOS_GPU0_M0_RD_ATYPE << 28) | (QOS_GPU0_M0_RD_MMU_PRIORITY << 12) | (QOS_GPU0_M0_RD_ORDER_ID << 4), (uintptr_t)QOS_GPU0_M0_RD_CBASS_MAP(channel));
+		}
+		else
+		{
+			writel((QOS_GPU0_M0_RD_ATYPE << 28) | (QOS_GPU0_M0_RD_PRIORITY << 12) | (QOS_GPU0_M0_RD_ORDER_ID << 4), (uintptr_t)QOS_GPU0_M0_RD_CBASS_MAP(channel));
+		}
+	}
+
+	/* gpu m0 wr */
+	for (group = 0; group < QOS_GPU0_M0_WR_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_GPU0_M0_WR_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_GPU0_M0_WR_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_GPU0_M0_WR_NUM_I_CH; ++channel) {
+
+		writel((QOS_GPU0_M0_WR_ATYPE << 28) | (QOS_GPU0_M0_WR_PRIORITY << 12) | (QOS_GPU0_M0_WR_ORDER_ID << 4), (uintptr_t)QOS_GPU0_M0_WR_CBASS_MAP(channel));
+	}
+
+	/* gpu m1 rd */
+	for (group = 0; group < QOS_GPU0_M1_RD_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_GPU0_M1_RD_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_GPU0_M1_RD_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_GPU0_M1_RD_NUM_I_CH; ++channel) {
 
-	for (group = 0; group < 2; ++group) {
-		writel(0x76543210, QOS_DSS0_FBDC_CBASS_GRP_MAP1(group));
-		writel(0xfedcba98, QOS_DSS0_FBDC_CBASS_GRP_MAP2(group));
+		if(channel == 0)
+		{
+			writel((QOS_GPU0_M1_RD_ATYPE << 28) | (QOS_GPU0_M1_RD_MMU_PRIORITY << 12) | (QOS_GPU0_M1_RD_ORDER_ID << 4), (uintptr_t)QOS_GPU0_M1_RD_CBASS_MAP(channel));
+		}
+		else
+		{
+			writel((QOS_GPU0_M1_RD_ATYPE << 28) | (QOS_GPU0_M1_RD_PRIORITY << 12) | (QOS_GPU0_M1_RD_ORDER_ID << 4), (uintptr_t)QOS_GPU0_M1_RD_CBASS_MAP(channel));
+		}
 	}
 
-	for (channel = 0; channel < 10; ++channel) {
-		u8 orderid;
-		u8 atype = 0;
+	/* gpu m1 wr */
+	for (group = 0; group < QOS_GPU0_M1_WR_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_GPU0_M1_WR_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_GPU0_M1_WR_CBASS_GRP_MAP2(group));
+	}
 
-		orderid = 0xf - channel;
+	for (channel = 0; channel < QOS_GPU0_M1_WR_NUM_I_CH; ++channel) {
 
-		writel((atype << 28) | (orderid << 4), QOS_DSS0_FBDC_CBASS_MAP(channel));
+		writel((QOS_GPU0_M1_WR_ATYPE << 28) | (QOS_GPU0_M1_WR_PRIORITY << 12) | (QOS_GPU0_M1_WR_ORDER_ID << 4), (uintptr_t)QOS_GPU0_M1_WR_CBASS_MAP(channel));
 	}
 }
-#endif
+
+void setup_encoder_qos(void)
+{
+	unsigned int channel, group;
+
+	/* encoder rd */
+	for (group = 0; group < QOS_ENCODER0_RD_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_ENCODER0_RD_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_ENCODER0_RD_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_ENCODER0_RD_NUM_I_CH; ++channel) {
+
+		writel((QOS_ENCODER0_RD_ATYPE << 28) | (QOS_ENCODER0_RD_PRIORITY << 12) | (QOS_ENCODER0_RD_ORDER_ID << 4), (uintptr_t)QOS_ENCODER0_RD_CBASS_MAP(channel));
+	}
+
+	/* encoder wr */
+	for (group = 0; group < QOS_ENCODER0_WR_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_ENCODER0_WR_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_ENCODER0_WR_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_ENCODER0_WR_NUM_I_CH; ++channel) {
+
+		writel((QOS_ENCODER0_WR_ATYPE << 28) | (QOS_ENCODER0_WR_PRIORITY << 12) | (QOS_ENCODER0_WR_ORDER_ID << 4), (uintptr_t)QOS_ENCODER0_WR_CBASS_MAP(channel));
+	}
+}
+
+void setup_decoder_qos(void)
+{
+	unsigned int channel, group;
+
+	/* decoder rd */
+	for (group = 0; group < QOS_DECODER0_RD_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_DECODER0_RD_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_DECODER0_RD_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_DECODER0_RD_NUM_I_CH; ++channel) {
+
+		writel((QOS_DECODER0_RD_ATYPE << 28) | (QOS_DECODER0_RD_PRIORITY << 12) | (QOS_DECODER0_RD_ORDER_ID << 4), (uintptr_t)QOS_DECODER0_RD_CBASS_MAP(channel));
+	}
+
+	/* decoder wr */
+	for (group = 0; group < QOS_DECODER0_WR_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_DECODER0_WR_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_DECODER0_WR_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_DECODER0_WR_NUM_I_CH; ++channel) {
+
+		writel((QOS_DECODER0_WR_ATYPE << 28) | (QOS_DECODER0_WR_PRIORITY << 12) | (QOS_DECODER0_WR_ORDER_ID << 4), (uintptr_t)QOS_DECODER0_WR_CBASS_MAP(channel));
+	}
+}
+
+void setup_c66_qos(void)
+{
+	unsigned int channel, group;
+
+	/* c66_0 mdma */
+	for (group = 0; group < QOS_C66SS0_MDMA_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_C66SS0_MDMA_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_C66SS0_MDMA_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_C66SS0_MDMA_NUM_I_CH; ++channel) {
+
+		writel((QOS_C66SS0_MDMA_ATYPE << 28) | (QOS_C66SS0_MDMA_PRIORITY << 12) | (QOS_C66SS0_MDMA_ORDER_ID << 4), (uintptr_t)QOS_C66SS0_MDMA_CBASS_MAP(channel));
+	}
+
+	/* c66_1 mdma */
+	for (group = 0; group < QOS_C66SS1_MDMA_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_C66SS1_MDMA_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_C66SS1_MDMA_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_C66SS1_MDMA_NUM_I_CH; ++channel) {
+
+		writel((QOS_C66SS1_MDMA_ATYPE << 28) | (QOS_C66SS1_MDMA_PRIORITY << 12) | (QOS_C66SS1_MDMA_ORDER_ID << 4), (uintptr_t)QOS_C66SS1_MDMA_CBASS_MAP(channel));
+	}
+}
+
+void setup_main_r5f_qos(void)
+{
+	unsigned int channel, group;
+
+	/* R5FSS0 core0 - read */
+	for (group = 0; group < QOS_R5FSS0_CORE0_MEM_RD_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_R5FSS0_CORE0_MEM_RD_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_R5FSS0_CORE0_MEM_RD_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_R5FSS0_CORE0_MEM_RD_NUM_I_CH; ++channel) {
+
+		writel((QOS_R5FSS0_CORE0_MEM_RD_ATYPE << 28) | (QOS_R5FSS0_CORE0_MEM_RD_PRIORITY << 12) | (QOS_R5FSS0_CORE0_MEM_RD_ORDER_ID << 4), (uintptr_t)QOS_R5FSS0_CORE0_MEM_RD_CBASS_MAP(channel));
+	}
+
+	/* R5FSS0 core0 - write */
+	for (group = 0; group < QOS_R5FSS0_CORE0_MEM_WR_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_R5FSS0_CORE0_MEM_WR_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_R5FSS0_CORE0_MEM_WR_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_R5FSS0_CORE0_MEM_WR_NUM_I_CH; ++channel) {
+
+		writel((QOS_R5FSS0_CORE0_MEM_WR_ATYPE << 28) | (QOS_R5FSS0_CORE0_MEM_WR_PRIORITY << 12) | (QOS_R5FSS0_CORE0_MEM_RD_ORDER_ID << 4), (uintptr_t)QOS_R5FSS0_CORE0_MEM_WR_CBASS_MAP(channel));
+	}
+
+	/* R5FSS0 core1 - read */
+	for (group = 0; group < QOS_R5FSS0_CORE1_MEM_RD_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_R5FSS0_CORE1_MEM_RD_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_R5FSS0_CORE1_MEM_RD_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_R5FSS0_CORE1_MEM_RD_NUM_I_CH; ++channel) {
+
+		writel((QOS_R5FSS0_CORE1_MEM_RD_ATYPE << 28) | (QOS_R5FSS0_CORE1_MEM_RD_PRIORITY << 12) | (QOS_R5FSS0_CORE0_MEM_RD_ORDER_ID << 4), (uintptr_t)QOS_R5FSS0_CORE1_MEM_RD_CBASS_MAP(channel));
+	}
+
+	/* R5FSS0 core1 - write */
+	for (group = 0; group < QOS_R5FSS0_CORE1_MEM_WR_NUM_J_CH; ++group) {
+		writel(0x76543210, (uintptr_t)QOS_R5FSS0_CORE1_MEM_WR_CBASS_GRP_MAP1(group));
+		writel(0xfedcba98, (uintptr_t)QOS_R5FSS0_CORE1_MEM_WR_CBASS_GRP_MAP2(group));
+	}
+
+	for (channel = 0; channel < QOS_R5FSS0_CORE1_MEM_WR_NUM_I_CH; ++channel) {
+
+		writel((QOS_R5FSS0_CORE1_MEM_WR_ATYPE << 28) | (QOS_R5FSS0_CORE1_MEM_WR_PRIORITY << 12) | (QOS_R5FSS0_CORE1_MEM_RD_ORDER_ID << 4), (uintptr_t)QOS_R5FSS0_CORE1_MEM_WR_CBASS_MAP(channel));
+	}
+
+}
 
 /*
  * This uninitialized global variable would normal end up in the .bss section,
@@ -268,7 +493,13 @@ void board_init_f(ulong dummy)
 	if (soc_is_j721e()) {
 		setup_navss_nb();
 #ifndef CONFIG_TI_SECURE_DEVICE
-		setup_dss_credentials();
+		setup_c66_qos();
+		setup_main_r5f_qos();
+		setup_vpac_qos();
+		setup_dmpac_qos();
+		setup_dss_qos();
+		setup_gpu_qos();
+		setup_encoder_qos();
 		setup_initiator_credentials();
 #endif
 	}
diff --git a/drivers/ram/k3-j721e/k3-j721e-ddrss.c b/drivers/ram/k3-j721e/k3-j721e-ddrss.c
index 9feb0aa766..8ac2d29898 100644
--- a/drivers/ram/k3-j721e/k3-j721e-ddrss.c
+++ b/drivers/ram/k3-j721e/k3-j721e-ddrss.c
@@ -323,6 +323,32 @@ void j721e_lpddr4_start(void)
 	}
 }
 
+
+void j721e_lpddr4_priority_map(void)
+{
+	/* Override defaults with a flattened priority */
+	/* This makes VBUSM.C priority take effect */
+    /* LPT */
+    *((unsigned int *)0x02980030) = (0x7 << 28) |
+                                    (0x7 << 24) |
+                                    (0x7 << 20) |
+                                    (0x7 << 16) |
+                                    (0x7 << 12) |
+                                    (0x7 <<  8) |
+                                    (0x7 <<  4) |
+                                    (0x7 <<  0);
+    /* HPT */
+    *((unsigned int *)0x0298004C) = (0x7 << 28) |
+                                    (0x7 << 24) |
+                                    (0x7 << 20) |
+                                    (0x7 << 16) |
+                                    (0x7 << 12) |
+                                    (0x7 <<  8) |
+                                    (0x7 <<  4) |
+                                    (0x7 <<  0);
+
+}
+
 static int j721e_ddrss_probe(struct udevice *dev)
 {
 	int ret;
@@ -343,6 +369,7 @@ static int j721e_ddrss_probe(struct udevice *dev)
 	j721e_lpddr4_probe();
 	j721e_lpddr4_init();
 	j721e_lpddr4_hardware_reg_init();
+	j721e_lpddr4_priority_map();
 	j721e_lpddr4_start();
 
 	return ret;
-- 
2.17.1

