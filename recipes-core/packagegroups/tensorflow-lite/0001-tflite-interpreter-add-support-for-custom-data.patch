From 7e9021c8f05906ea643ff614453563a739287e95 Mon Sep 17 00:00:00 2001
From: Subhajit Paul <subhajit_paul@ti.com>
Date: Thu, 21 Jan 2021 07:32:06 +0530
Subject: [PATCH] tflite interpreter : add support for custom data

Signed-off-by: Subhajit Paul <subhajit_paul@ti.com>
---
 tensorflow/lite/c/common.h                    |  6 ++
 tensorflow/lite/core/subgraph.cc              | 21 +++++
 tensorflow/lite/core/subgraph.h               |  2 +
 tensorflow/lite/interpreter.cc                | 77 +++++++++++++++++++
 tensorflow/lite/interpreter.h                 |  6 ++
 tensorflow/lite/python/interpreter.py         |  2 +
 .../interpreter_wrapper.cc                    | 10 +++
 .../interpreter_wrapper/interpreter_wrapper.h |  1 +
 .../interpreter_wrapper_pybind11.cc           |  3 +
 9 files changed, 128 insertions(+)

diff --git a/tensorflow/lite/c/common.h b/tensorflow/lite/c/common.h
index e04e1a12cd4..c09b9677081 100644
--- a/tensorflow/lite/c/common.h
+++ b/tensorflow/lite/c/common.h
@@ -879,6 +879,12 @@ typedef struct TfLiteRegistration {
   // Note: It is the responsibility of the registration binder to set this
   // properly.
   int version;
+
+  TfLiteStatus (*get_custom_data)(TfLiteContext* context,
+                                  TfLiteNode* node,
+                                  const char *op_name,
+                                  char **node_name,
+                                  void **node_data);
 } TfLiteRegistration;
 
 // The flags used in `TfLiteDelegate`. Note that this is a bitmask, so the
diff --git a/tensorflow/lite/core/subgraph.cc b/tensorflow/lite/core/subgraph.cc
index cece4ecba87..42c08ec07a6 100644
--- a/tensorflow/lite/core/subgraph.cc
+++ b/tensorflow/lite/core/subgraph.cc
@@ -1609,4 +1609,25 @@ TfLiteStatus Subgraph::SetCustomAllocationForTensor(
   return kTfLiteOk;
 }
 
+std::vector<std::pair<std::string, void *>> Subgraph::get_custom_data(std::string token) {
+  std::vector<std::pair<std::string, void *>> ret;
+
+  for (int execution_plan_index = 0;
+       execution_plan_index < execution_plan_.size(); execution_plan_index++) {
+    int node_index = execution_plan_[execution_plan_index];
+    TfLiteNode& node = nodes_and_registration_[node_index].first;
+    const TfLiteRegistration& registration =
+        nodes_and_registration_[node_index].second;
+
+    if(registration.get_custom_data != nullptr) {
+      char *node_name;
+      void *node_data;
+      TfLiteStatus status = registration.get_custom_data(&context_, &node, token.c_str(), &node_name, &node_data);
+      if(status == kTfLiteOk)
+        ret.push_back(std::make_pair(std::string(node_name), node_data));
+    }
+  }
+  return ret;
+}
+
 }  // namespace tflite
diff --git a/tensorflow/lite/core/subgraph.h b/tensorflow/lite/core/subgraph.h
index ed3b55ce630..d289412afa1 100644
--- a/tensorflow/lite/core/subgraph.h
+++ b/tensorflow/lite/core/subgraph.h
@@ -741,6 +741,8 @@ class Subgraph {
 
   // A map of resources. Owned by interpreter and shared by multiple subgraphs.
   resource::ResourceMap* resources_ = nullptr;
+
+  std::vector<std::pair<std::string, void *>> get_custom_data(std::string);
 };
 
 }  // namespace tflite
diff --git a/tensorflow/lite/interpreter.cc b/tensorflow/lite/interpreter.cc
index 25acac96cf4..f5b9eeeaee6 100644
--- a/tensorflow/lite/interpreter.cc
+++ b/tensorflow/lite/interpreter.cc
@@ -54,6 +54,13 @@ namespace tflite {
 
 namespace {
 
+static inline void get_time_u64(uint64_t *t)
+{
+    struct timespec ts;
+    clock_gettime(CLOCK_MONOTONIC, &ts);
+    *t = (uint64_t)ts.tv_sec * (uint64_t)1000000000ull + (uint64_t)ts.tv_nsec;
+}
+
 // Gets the current TfLiteQuantization from the legacy TfLiteQuantizationParams.
 TfLiteQuantization GetQuantizationFromLegacy(
     const TfLiteQuantizationParams& legacy_quantization) {
@@ -277,6 +284,23 @@ TfLiteStatus Interpreter::ReleaseNonPersistentMemory() {
 }
 
 TfLiteStatus Interpreter::Invoke() {
+  void *out;
+  std::vector<std::pair<std::string, void *>> c_data;
+
+  get_time_u64(&run_start_ts);
+  c_data = primary_subgraph().get_custom_data("ddr_stats");
+  if(!c_data.size()) {
+      run_start_ddr_read = run_start_ddr_write = 0;
+  } else {
+      for (auto e : c_data) {
+          std::pair<uint64_t, uint64_t> *s = static_cast<std::pair<uint64_t, uint64_t>*>(e.second);
+          // it does not matter which value we take
+          run_start_ddr_read = s->first;
+          run_start_ddr_write = s->second;
+          delete s;
+      }
+  }
+
   ScopedRuntimeInstrumentationProfile scoped_runtime_event(installed_profiler_,
                                                            "invoke");
   TF_LITE_ENSURE_STATUS_WITH_SCOPED_INSTRUMENTATION(
@@ -289,6 +313,25 @@ TfLiteStatus Interpreter::Invoke() {
           primary_subgraph().EnsureTensorDataIsReadable(tensor_index));
     }
   }
+  c_data = primary_subgraph().get_custom_data("ddr_stats");
+  if(!c_data.size()) {
+      run_end_ddr_read = run_end_ddr_write = 0;
+  } else {
+      for (auto e : c_data) {
+          std::pair<uint64_t, uint64_t> *s = static_cast<std::pair<uint64_t, uint64_t>*>(e.second);
+          // it does not matter which value we take
+          run_end_ddr_read = s->first;
+          run_end_ddr_write = s->second;
+          delete s;
+      }
+  }
+  get_time_u64(&run_end_ts);
+
+  /* adjust for wrap around */
+  if(run_end_ddr_read < run_start_ddr_read)
+    run_end_ddr_read = (uint64_t)0xffffffffffffffffull + run_end_ddr_read;
+  if(run_end_ddr_write < run_start_ddr_write)
+    run_end_ddr_write = 0xffffffffffffffffull + run_end_ddr_write;
 
   return kTfLiteOk;
 }
@@ -473,4 +516,38 @@ Profiler* Interpreter::GetProfiler() {
   return primary_subgraph().GetProfiler();
 }
 
+std::vector<std::pair<std::string, uint64_t>> Interpreter::get_TI_benchmark_data() {
+    std::vector<std::pair<std::string, uint64_t>> res;
+    std::vector<std::pair<std::string, void *>> c_data;
+
+    /* get the run duration */
+    res.push_back(std::make_pair<std::string, uint64_t>("ts:run_start", uint64_t(run_start_ts)));
+    res.push_back(std::make_pair<std::string, uint64_t>("ts:run_end", uint64_t(run_end_ts)));
+
+    /* get the ddr bw numbers */
+    res.push_back(std::make_pair<std::string, uint64_t>("ddr:read_start", uint64_t(run_start_ddr_read)));
+    res.push_back(std::make_pair<std::string, uint64_t>("ddr:read_end", uint64_t(run_end_ddr_read)));
+    res.push_back(std::make_pair<std::string, uint64_t>("ddr:write_start", uint64_t(run_start_ddr_write)));
+    res.push_back(std::make_pair<std::string, uint64_t>("ddr:write_end", uint64_t(run_end_ddr_write)));
+
+    c_data = primary_subgraph().get_custom_data("perf_stats");
+    if(c_data.size()) {
+        for (auto e : c_data) {
+            std::string prefix = "ts:subgraph_" + e.first + "_";
+            std::string annots[] = {
+                "copy_in_start", "copy_in_end",
+                "proc_start", "proc_end",
+                "copy_out_start", "copy_out_end"
+            };
+            std::vector<uint64_t> *s = static_cast<std::vector<uint64_t>*>(e.second);
+            int index = 0;
+            for(auto it = s->begin(); it != s->end(); it++, index++)
+                res.push_back(std::make_pair<std::string, uint64_t>(prefix + annots[index], uint64_t(*it)));
+            delete s;
+        }
+    }
+
+    return res;
+}
+
 }  // namespace tflite
diff --git a/tensorflow/lite/interpreter.h b/tensorflow/lite/interpreter.h
index ef5831fda50..388317947f7 100644
--- a/tensorflow/lite/interpreter.h
+++ b/tensorflow/lite/interpreter.h
@@ -591,6 +591,8 @@ class Interpreter {
 
 #endif  // DOXYGEN_SKIP
 
+  std::vector<std::pair<std::string, uint64_t>> get_TI_benchmark_data();
+
  private:
   friend class InterpreterBuilder;
   friend class tflite::InterpreterTest;
@@ -661,6 +663,10 @@ class Interpreter {
   // An empty one means there's no delegate to be applied by default or
   // delegates have been applied and doesn't need to be applied again.
   std::vector<TfLiteDelegatePtr> lazy_delegate_providers_;
+
+  uint64_t run_start_ts, run_start_ddr_read, run_start_ddr_write;
+  uint64_t run_end_ts, run_end_ddr_read, run_end_ddr_write;
+
 };
 
 }  // namespace tflite
diff --git a/tensorflow/lite/python/interpreter.py b/tensorflow/lite/python/interpreter.py
index cd5a237b0ef..59f18466aaa 100644
--- a/tensorflow/lite/python/interpreter.py
+++ b/tensorflow/lite/python/interpreter.py
@@ -564,6 +564,8 @@ class Interpreter(object):
     """
     return self._interpreter.interpreter()
 
+  def get_TI_benchmark_data(self):
+    return self._interpreter.get_TI_benchmark_data()
 
 class InterpreterWithCustomOps(Interpreter):
   """Interpreter interface for TensorFlow Lite Models that accepts custom ops.
diff --git a/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper.cc b/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper.cc
index adfa760f147..0de2b220446 100644
--- a/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper.cc
+++ b/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper.cc
@@ -723,5 +723,15 @@ PyObject* InterpreterWrapper::ModifyGraphWithDelegate(
   Py_RETURN_NONE;
 }
 
+PyObject* InterpreterWrapper::get_TI_benchmark_data() const {
+  TFLITE_PY_ENSURE_VALID_INTERPRETER();
+  std::vector<std::pair<std::string, uint64_t>> res = interpreter_->get_TI_benchmark_data();
+  PyObject* result = PyDict_New();
+  for (auto e : res)
+    PyDict_SetItemString(result, e.first.c_str(), PyLong_FromUnsignedLongLong(e.second));
+  return result;
+  Py_RETURN_NONE;
+}
+
 }  // namespace interpreter_wrapper
 }  // namespace tflite
diff --git a/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper.h b/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper.h
index 6b83d2d06db..3e8062bd82a 100644
--- a/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper.h
+++ b/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper.h
@@ -108,6 +108,7 @@ class InterpreterWrapper {
   tflite_api_dispatcher::Interpreter* interpreter() {
     return interpreter_.get();
   }
+  PyObject* get_TI_benchmark_data() const;
 
  private:
   // Helper function to construct an `InterpreterWrapper` object.
diff --git a/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper_pybind11.cc b/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper_pybind11.cc
index 61771ff62a4..a60f062a91b 100644
--- a/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper_pybind11.cc
+++ b/tensorflow/lite/python/interpreter_wrapper/interpreter_wrapper_pybind11.cc
@@ -184,5 +184,8 @@ PYBIND11_MODULE(_pywrap_tensorflow_interpreter_wrapper, m) {
           )pbdoc")
       .def("interpreter", [](InterpreterWrapper& self) {
         return reinterpret_cast<intptr_t>(self.interpreter());
+      })
+      .def("get_TI_benchmark_data", [](const InterpreterWrapper& self) {
+        return tensorflow::PyoOrThrow(self.get_TI_benchmark_data());
       });
 }
-- 
2.17.1

