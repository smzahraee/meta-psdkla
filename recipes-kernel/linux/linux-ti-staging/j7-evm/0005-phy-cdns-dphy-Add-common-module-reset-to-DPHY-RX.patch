From 1683d1b94c8f7d154dfb869462b8c5c22699a40c Mon Sep 17 00:00:00 2001
From: Sinthu Raja <sinthu.raja@ti.com>
Date: Fri, 23 Jul 2021 11:48:59 +0530
Subject: [PATCH 5/9] phy: cdns-dphy: Add common module reset to DPHY RX
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

DPHY RX module has a common module reset (RSTB_CMN) among four different
other resets. The module expects all four resets to be released in a
specific order. In TI J721E SR1.0 the RSTB_CMN is internally tied to
CSI_RX_RST which is hardware controlled, so no explicit control from
software is required to reset the DPHY RX module.

With J721E SR2.0 the RSTB_CMN is separated out of the hardware controlled
and tied to a MMR bit of the DPHY RX module. An explicit write to control
the common module reset from software is required. 

Update DPHY_RX configure function to release the common module reset.
Currently this feature is specific to TI J721E SR2.0 therefore add a
compatible string and introduce a driver quirk to release the reset and
set it for J721E SR2.0

Signed-off-by: Sinthu Raja <sinthu.raja@ti.com>
---
 drivers/phy/cadence/cdns-dphy.c | 45 +++++++++++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/drivers/phy/cadence/cdns-dphy.c b/drivers/phy/cadence/cdns-dphy.c
index 023c9e5b62f5..64998f5ed865 100644
--- a/drivers/phy/cadence/cdns-dphy.c
+++ b/drivers/phy/cadence/cdns-dphy.c
@@ -12,6 +12,7 @@
 #include <linux/module.h>
 #include <linux/of_address.h>
 #include <linux/of_device.h>
+#include <linux/sys_soc.h>
 #include <linux/platform_device.h>
 #include <linux/reset.h>
 
@@ -29,6 +30,7 @@
 #define DPHY_PMA_RDATA(lane, reg)	(0x700 + ((lane) * 0x100) + (reg))
 #define DPHY_PCS(reg)			(0xb00 + (reg))
 #define DPHY_ISO(reg)			(0xc00 + (reg))
+#define DPHY_WRAP(reg)			(0x1000 + (reg))
 
 #define DPHY_CMN_SSM			DPHY_PMA_CMN(0x20)
 #define DPHY_CMN_SSM_EN			BIT(0)
@@ -65,6 +67,9 @@
 #define DPHY_POWER_ISLAND_EN_CLK	DPHY_PCS(0xc)
 #define DPHY_POWER_ISLAND_EN_CLK_VAL	0xaa
 
+#define DPHY_LANE			DPHY_WRAP(0x0)
+#define DPHY_LANE_RESET_CMN_EN		BIT(23)
+
 #define DPHY_ISO_CL_CTRL_L		DPHY_ISO(0x10)
 #define DPHY_ISO_DL_CTRL_L0		DPHY_ISO(0x14)
 #define DPHY_ISO_DL_CTRL_L1		DPHY_ISO(0x20)
@@ -115,6 +120,10 @@ struct cdns_dphy_ops {
 	unsigned long (*get_wakeup_time_ns)(struct cdns_dphy *dphy);
 };
 
+struct cdns_dphy_quirks {
+	bool has_reset;
+};
+
 struct cdns_dphy {
 	struct cdns_dphy_cfg cfg;
 	void __iomem *regs;
@@ -128,6 +137,7 @@ struct cdns_dphy {
 struct cdns_dphy_driver_data {
 	const struct cdns_dphy_ops *tx;
 	const struct cdns_dphy_ops *rx;
+	const struct cdns_dphy_quirks *quirks;
 };
 
 struct cdns_dphy_rx_band {
@@ -430,12 +440,31 @@ static int cdns_dphy_rx_wait_lane_ready(struct cdns_dphy *dphy, int lanes)
 	return 0;
 }
 
+static const struct soc_device_attribute cdns_dphy_socinfo[] = {
+	{ .family = "J721E", .revision = "SR2.0", },
+	{/* sentinel */}
+};
+
 static int cdns_dphy_rx_configure(struct cdns_dphy *dphy,
 				  union phy_configure_opts *opts)
 {
+	const struct cdns_dphy_driver_data *ddata;
+	const struct soc_device_attribute *soc;
 	unsigned int reg;
 	int band_ctrl, ret;
 
+	soc = soc_device_match(cdns_dphy_socinfo);
+	if (soc) {
+		ddata = of_device_get_match_data(dphy->dev);
+		if (!ddata)
+			return -EINVAL;
+
+		if (ddata->quirks->has_reset) {
+			reg = DPHY_LANE_RESET_CMN_EN;
+			writel(reg, dphy->regs + DPHY_LANE);
+		}
+	}
+
 	band_ctrl = cdns_dphy_rx_get_band_ctrl(opts->mipi_dphy.hs_clk_rate);
 	if (band_ctrl < 0)
 		return band_ctrl;
@@ -484,6 +513,14 @@ static const struct cdns_dphy_ops rx_ref_dphy_ops = {
 	.validate = cdns_dphy_rx_validate,
 };
 
+struct cdns_dphy_quirks cdns_dphy_quirks = {
+	.has_reset = false,
+};
+
+struct cdns_dphy_quirks j721e_dphy_quirks = {
+	.has_reset = true,
+};
+
 /*
  * This is the reference implementation of DPHY hooks. Specific integration of
  * this IP may have to re-implement some of them depending on how they decided
@@ -492,6 +529,13 @@ static const struct cdns_dphy_ops rx_ref_dphy_ops = {
 static const struct cdns_dphy_driver_data ref_dphy_ops = {
 	.tx = &tx_ref_dphy_ops,
 	.rx = &rx_ref_dphy_ops,
+	.quirks = &cdns_dphy_quirks,
+};
+
+static const struct cdns_dphy_driver_data j721e_dphy = {
+	.tx = &tx_ref_dphy_ops,
+	.rx = &rx_ref_dphy_ops,
+	.quirks = &j721e_dphy_quirks,
 };
 
 static int cdns_dphy_validate(struct phy *phy, enum phy_mode mode, int submode,
@@ -643,6 +687,7 @@ static int cdns_dphy_remove(struct platform_device *pdev)
 
 static const struct of_device_id cdns_dphy_of_match[] = {
 	{ .compatible = "cdns,dphy", .data = &ref_dphy_ops },
+	{ .compatible = "ti,j721e-dphy", .data = &j721e_dphy },
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, cdns_dphy_of_match);
-- 
2.31.1

