From 87a4e0ab2d70d1e197f974e9d7eaabcd1b7c89d9 Mon Sep 17 00:00:00 2001
From: Prasanth Babu Mantena <p-mantena@ti.com>
Date: Fri, 1 Apr 2022 16:48:35 +0530
Subject: [PATCH] vxe: vxd: decoder: remove DMA_IMPORT mode

This remove the DMA IMPORT feature after which looping works.
Revert back of DMA_IMPORT Patch

This patch should be removed after following is fixed:
https://jira.itg.ti.com/browse/LCPD-25330

Signed-off-by: Prasanth Babu Mantena <p-mantena@ti.com>
---
 .../platform/vxe-vxd/decoder/vdec_defs.h      |   1 -
 .../media/platform/vxe-vxd/decoder/vxd_dec.h  |  11 --
 .../media/platform/vxe-vxd/decoder/vxd_v4l2.c | 104 ++++--------------
 3 files changed, 21 insertions(+), 95 deletions(-)

diff --git a/drivers/media/platform/vxe-vxd/decoder/vdec_defs.h b/drivers/media/platform/vxe-vxd/decoder/vdec_defs.h
index 34ba605b4..d7f182fd9 100644
--- a/drivers/media/platform/vxe-vxd/decoder/vdec_defs.h
+++ b/drivers/media/platform/vxe-vxd/decoder/vdec_defs.h
@@ -484,7 +484,6 @@ struct vdec_buf_info {
 	enum sys_emem_attrib mem_attrib;
 	void *buf_alloc_handle;
 	void *buf_map_handle;
-	unsigned long  dma_addr;
 };
 
 #ifdef HAS_JPEG
diff --git a/drivers/media/platform/vxe-vxd/decoder/vxd_dec.h b/drivers/media/platform/vxe-vxd/decoder/vxd_dec.h
index 896bce6fc..1c87906b3 100644
--- a/drivers/media/platform/vxe-vxd/decoder/vxd_dec.h
+++ b/drivers/media/platform/vxe-vxd/decoder/vxd_dec.h
@@ -320,14 +320,6 @@ struct vxd_stream {
 	unsigned int id;
 };
 
-
-struct vxd_mapping {
-	struct list_head list;
-	unsigned int buf_map_id;
-	unsigned char reuse;
-	unsigned long dma_addr;
-};
-
 /*
  * struct vxd_buffer - holds per buffer info.
  * @buffer: the vb2_v4l2_buffer
@@ -347,7 +339,6 @@ struct vxd_buffer {
 	unsigned char mapped;
 	unsigned char reuse;
 	unsigned int buf_map_id;
-	struct vxd_mapping *mapping;
 	struct vdec_buf_info buf_info;
 	struct bspp_ddbuf_info bstr_info;
 	struct vdecdd_str_unit seq_unit;
@@ -380,7 +371,6 @@ typedef void (*decode_cb)(int res_str_id, unsigned int *msg, unsigned int msg_si
  * @return_queue: list of resources returned from core
  * @out_buffers: list of all output buffers
  * @cap_buffers: list of all capture buffers except those in reuse_queue
- * @cap_mappings: list of all capture buffers mapped to HW
  * @reuse_queue: list of capture buffers waiting for core to signal reuse
  * @res_str_id: Core stream id
  * @stream_created: Core stream is created
@@ -416,7 +406,6 @@ struct vxd_dec_ctx {
 	struct list_head return_queue;
 	struct list_head out_buffers;
 	struct list_head cap_buffers;
-	struct list_head cap_mappings;
 	struct list_head reuse_queue;
 	unsigned int res_str_id;
 	unsigned char stream_created;
diff --git a/drivers/media/platform/vxe-vxd/decoder/vxd_v4l2.c b/drivers/media/platform/vxe-vxd/decoder/vxd_v4l2.c
index 8411b9b34..a5f1bc90b 100644
--- a/drivers/media/platform/vxe-vxd/decoder/vxd_v4l2.c
+++ b/drivers/media/platform/vxe-vxd/decoder/vxd_v4l2.c
@@ -301,20 +301,6 @@ static irqreturn_t hard_isrcb(int irq, void *dev_id)
 	return vxd_handle_irq(&pdev->dev);
 }
 
-static struct vxd_mapping *find_mapping(unsigned int buf_map_id, struct list_head *head)
-{
-	struct list_head *list;
-	struct vxd_mapping *mapping = NULL;
-
-	list_for_each(list, head) {
-		mapping = list_entry(list, struct vxd_mapping, list);
-		if (mapping->buf_map_id == buf_map_id)
-			break;
-		mapping = NULL;
-	}
-	return mapping;
-}
-
 static struct vxd_buffer *find_buffer(unsigned int buf_map_id, struct list_head *head)
 {
 	struct list_head *list;
@@ -409,7 +395,6 @@ static void vxd_return_resource(void *ctx_handle, enum vxd_cb_type type,
 	struct vxd_return *res;
 	struct vxd_buffer *buf = NULL;
 	struct vb2_v4l2_buffer *vb;
-	struct vxd_mapping *mapping = NULL;
 	struct vxd_dec_ctx *ctx = (struct vxd_dec_ctx *)ctx_handle;
 	struct v4l2_event event = {};
 	struct device *dev = ctx->dev->dev;
@@ -462,7 +447,7 @@ static void vxd_return_resource(void *ctx_handle, enum vxd_cb_type type,
 				buf_map_id);
 			break;
 		}
-		buf->mapping->reuse = FALSE;
+		buf->reuse = FALSE;
 		buf->buffer.vb.field = V4L2_FIELD_NONE;
 		q_data = get_q_data(ctx, buf->buffer.vb.vb2_buf.vb2_queue->type);
 		if (!q_data)
@@ -477,19 +462,20 @@ static void vxd_return_resource(void *ctx_handle, enum vxd_cb_type type,
 	case VXD_CB_PICT_RELEASE:
 		buf = find_buffer(buf_map_id, &ctx->reuse_queue);
 		if (buf) {
-			buf->mapping->reuse = TRUE;
+			buf->reuse = TRUE;
 			list_move_tail(&buf->list, &ctx->cap_buffers);
 
 			v4l2_m2m_buf_queue(ctx->fh.m2m_ctx, &buf->buffer.vb);
 			break;
 		}
-		mapping = find_mapping(buf_map_id, &ctx->cap_mappings);
-		if (!mapping) {
+		buf = find_buffer(buf_map_id, &ctx->cap_buffers);
+		if (!buf) {
 			dev_err(dev, "Could not locate buf_map_id=0x%x in CAPTURE buffers list\n",
 				buf_map_id);
+
 			break;
 		}
-		mapping->reuse = TRUE;
+		buf->reuse = TRUE;
 
 		break;
 	case VXD_CB_PICT_END:
@@ -629,9 +615,6 @@ static int vxd_dec_buf_prepare(struct vb2_buffer *vb)
 	int nents = 0;
 	int size = 0;
 	int plane, num_planes, ret = 0;
-	unsigned long dma_addr;
-	struct vxd_mapping *mapping;
-	struct list_head *list;
 	struct vxd_buffer *buf =
 		container_of(vb, struct vxd_buffer, buffer.vb.vb2_buf);
 
@@ -650,38 +633,8 @@ static int vxd_dec_buf_prepare(struct vb2_buffer *vb)
 		}
 	}
 
-	if (buf->mapped && !V4L2_TYPE_IS_OUTPUT(vb->type)) {
-#ifdef CAPTURE_CONTIG_ALLOC
-		dma_addr = vb2_dma_contig_plane_dma_addr(vb, 0);
-#else
-		sgt = vb2_dma_sg_plane_desc(vb, 0);
-		if (!sgt)
-			return -EFAULT;
-
-		dma_addr = sg_phys(img_mmu_get_sgl(sgt));
-#endif
-		if (buf->buf_info.dma_addr != dma_addr) {
-			list_for_each(list, &ctx->cap_mappings) {
-				mapping = list_entry(list, struct vxd_mapping, list);
-				if (dma_addr == mapping->dma_addr)
-					break;
-
-				mapping = NULL;
-			}
-			if (mapping) {
-				/* skip the mapping, buf update buf_map_id */
-				buf->buf_info.dma_addr = mapping->dma_addr;
-				buf->buf_map_id = mapping->buf_map_id;
-				buf->buf_info.cpu_linear_addr = vb2_plane_vaddr(vb, 0);
-				buf->mapping = mapping;
-				return 0;
-			}
-		} else {
-			return 0;
-		}
-	} else if (buf->mapped) {
+	if (buf->mapped)
 		return 0;
-	}
 
 	buf->buf_info.cpu_linear_addr = vb2_plane_vaddr(vb, 0);
 	buf->buf_info.buf_size = vb2_plane_size(vb, 0);
@@ -693,7 +646,6 @@ static int vxd_dec_buf_prepare(struct vb2_buffer *vb)
 	}
 
 	if (V4L2_TYPE_IS_OUTPUT(vb->type)) {
-		buf->buf_info.dma_addr = sg_phys(img_mmu_get_sgl(sgt));
 		ret = core_stream_map_buf_sg(ctx->res_str_id,
 					     VDEC_BUFTYPE_BITSTREAM,
 					     &buf->buf_info, sgt,
@@ -715,11 +667,6 @@ static int vxd_dec_buf_prepare(struct vb2_buffer *vb)
 
 		list_add_tail(&buf->list, &ctx->out_buffers);
 	} else {
-#ifdef CAPTURE_CONTIG_ALLOC
-		buf->buf_info.dma_addr = vb2_dma_contig_plane_dma_addr(vb, 0);
-#else
-		buf->buf_info.dma_addr = sg_phys(img_mmu_get_sgl(sgt));
-#endif
 		/* Create a single sgt from the plane(s) */
 		sgt_new = kmalloc(sizeof(*sgt_new), GFP_KERNEL);
 		if (!sgt_new)
@@ -784,19 +731,10 @@ static int vxd_dec_buf_prepare(struct vb2_buffer *vb)
 			dev_err(dev, "CAPTURE core_stream_map_buf_sg failed\n");
 			return ret;
 		}
-		if (buf->mapped == FALSE)
-			list_add_tail(&buf->list, &ctx->cap_buffers);
-
-		/* Add this to the mappings */
-		mapping = kzalloc(sizeof(*mapping), GFP_KERNEL);
-
-		mapping->reuse = TRUE;
-		mapping->dma_addr = buf->buf_info.dma_addr;
-		mapping->buf_map_id = buf->buf_map_id;
-		list_add_tail(&mapping->list, &ctx->cap_mappings);
-		buf->mapping = mapping;
+		list_add_tail(&buf->list, &ctx->cap_buffers);
 	}
 	buf->mapped = TRUE;
+	buf->reuse = TRUE;
 
 	return 0;
 }
@@ -814,7 +752,7 @@ static void vxd_dec_buf_queue(struct vb2_buffer *vb)
 		v4l2_m2m_buf_queue(ctx->fh.m2m_ctx, vbuf);
 	} else {
 		mutex_lock_nested(ctx->mutex, SUBCLASS_VXD_V4L2);
-		if (buf->mapping->reuse) {
+		if (buf->reuse) {
 			mutex_unlock(ctx->mutex);
 			if (ctx->flag_last) {
 				q_data = get_q_data(ctx, V4L2_BUF_TYPE_VIDEO_CAPTURE);
@@ -892,7 +830,6 @@ static void vxd_dec_stop_streaming(struct vb2_queue *vq)
 	struct list_head *list;
 	struct list_head *temp;
 	struct vxd_buffer *buf = NULL;
-	struct vxd_mapping *mapping = NULL;
 
 	if (V4L2_TYPE_IS_OUTPUT(vq->type))
 		ctx->dst_streaming = FALSE;
@@ -910,6 +847,7 @@ static void vxd_dec_stop_streaming(struct vb2_queue *vq)
 
 		core_stream_flush(ctx->res_str_id, TRUE);
 	}
+
 	/* unmap all the output and capture plane buffers */
 	if (V4L2_TYPE_IS_OUTPUT(vq->type)) {
 		list_for_each(list, &ctx->out_buffers) {
@@ -925,10 +863,11 @@ static void vxd_dec_stop_streaming(struct vb2_queue *vq)
 			v4l2_m2m_buf_queue(ctx->fh.m2m_ctx, &buf->buffer.vb);
 		}
 
-		list_for_each(list, &ctx->cap_mappings) {
-			mapping = list_entry(list, struct vxd_mapping, list);
-			core_stream_unmap_buf_sg(mapping->buf_map_id);
-			__list_del_entry(&mapping->list);
+		list_for_each(list, &ctx->cap_buffers) {
+			buf = list_entry(list, struct vxd_buffer, list);
+			core_stream_unmap_buf_sg(buf->buf_map_id);
+			buf->mapped = FALSE;
+			__list_del_entry(&buf->list);
 		}
 	}
 
@@ -1079,7 +1018,6 @@ static int vxd_dec_open(struct file *file)
 	INIT_LIST_HEAD(&ctx->return_queue);
 	INIT_LIST_HEAD(&ctx->out_buffers);
 	INIT_LIST_HEAD(&ctx->cap_buffers);
-	INIT_LIST_HEAD(&ctx->cap_mappings);
 
 	mutex_unlock(vxd->mutex);
 
@@ -1108,7 +1046,6 @@ static int vxd_dec_release(struct file *file)
 	struct list_head *list;
 	struct list_head *temp;
 	struct vxd_buffer *buf = NULL;
-	struct vxd_mapping *mapping = NULL;
 
 	s_q_data = &ctx->q_data[Q_DATA_SRC];
 	if (ctx->core_streaming) {
@@ -1132,10 +1069,11 @@ static int vxd_dec_release(struct file *file)
 		__list_del_entry(&buf->list);
 	}
 
-	list_for_each(list, &ctx->cap_mappings) {
-		mapping = list_entry(list, struct vxd_mapping, list);
-		core_stream_unmap_buf_sg(mapping->buf_map_id);
-		__list_del_entry(&mapping->list);
+	list_for_each(list, &ctx->cap_buffers) {
+		buf = list_entry(list, struct vxd_buffer, list);
+		core_stream_unmap_buf_sg(buf->buf_map_id);
+		buf->mapped = FALSE;
+		__list_del_entry(&buf->list);
 	}
 	if (ctx->stream_created) {
 		bspp_stream_destroy(ctx->bspp_context);
-- 
2.17.1

