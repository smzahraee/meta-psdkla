From a1b05039dbf8f1d80a59aeba22dff389df222b29 Mon Sep 17 00:00:00 2001
From: Dharma B <dharma.b@ti.com>
Date: Tue, 30 Nov 2021 20:20:25 +0530
Subject: [PATCH 15/17] cpts: latch: disable tmr irq while latch is on

Disable TMR IRQ while PPS latch is on and re-enable
it when PPS latch is off.
The CPTS HW_TS IRQ will happen on TMR overflow, so
adjustment can be done from CPTS IRQ.

Signed-off-by: Dharma B <dharma.b@ti.com>
---
 drivers/net/ethernet/ti/cpts.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/drivers/net/ethernet/ti/cpts.c b/drivers/net/ethernet/ti/cpts.c
index ec15050fd34c..b79b39ee65fb 100644
--- a/drivers/net/ethernet/ti/cpts.c
+++ b/drivers/net/ethernet/ti/cpts.c
@@ -1898,6 +1898,11 @@ static inline void cpts_latch_pps_stop(struct cpts *cpts)
 	WRITE_TCLR(cpts->odt2, v);
 
 	cpts->pps_latch_state = INIT;
+
+	/* enable tmr irq for init-  no overflow/hwts from now */
+	writel_relaxed(OMAP_TIMER_INT_CAPTURE, cpts->odt2->irq_ena);
+	__omap_dm_timer_write(cpts->odt2, OMAP_TIMER_WAKEUP_EN_REG,
+			OMAP_TIMER_INT_CAPTURE, 0);
 }
 
 static inline void cpts_latch_pps_start(struct cpts *cpts)
@@ -1908,6 +1913,10 @@ static inline void cpts_latch_pps_start(struct cpts *cpts)
 	v = READ_TCLR(cpts->odt2);
 	v |= BIT(11);
 	WRITE_TCLR(cpts->odt2, v);
+
+	/* disable tmr irq - overflow/hwts will do from now */
+	writel_relaxed(0, cpts->odt2->irq_ena);
+	__omap_dm_timer_write(cpts->odt2, OMAP_TIMER_WAKEUP_EN_REG, 0, 0);
 }
 
 static void cpts_latch_proc_init(struct cpts *cpts)
-- 
2.17.0

