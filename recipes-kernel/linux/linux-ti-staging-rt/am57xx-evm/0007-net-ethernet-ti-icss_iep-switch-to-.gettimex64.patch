From 653e9b89143f938209722be598ddcef14fde4415 Mon Sep 17 00:00:00 2001
From: Grygorii Strashko <grygorii.strashko@ti.com>
Date: Fri, 18 Dec 2020 20:24:28 +0200
Subject: [PATCH 07/35] net: ethernet: ti: icss_iep: switch to .gettimex64()

The .gettime64() is deprecated by commit 916444df305e ("ptp: deprecate
gettime64() in favor of gettimex64()").

Hence switch IEP driver to use .gettimex64().

Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
---
 drivers/net/ethernet/ti/icss_iep.c | 26 ++++++++++++++++----------
 1 file changed, 16 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/ti/icss_iep.c b/drivers/net/ethernet/ti/icss_iep.c
index b8d5b531a9c8..b454b6f16706 100644
--- a/drivers/net/ethernet/ti/icss_iep.c
+++ b/drivers/net/ethernet/ti/icss_iep.c
@@ -201,7 +201,8 @@ static void icss_iep_settime(struct icss_iep *iep, u64 ns)
 	icss_iep_set_counter(iep, ns);
 }
 
-static u64 icss_iep_gettime(struct icss_iep *iep)
+static u64 icss_iep_gettime(struct icss_iep *iep,
+			    struct ptp_system_timestamp *sts)
 {
 	u32 ts_hi = 0, ts_hi1 = 0, ts_lo;
 	unsigned long flags;
@@ -215,13 +216,17 @@ static u64 icss_iep_gettime(struct icss_iep *iep)
 	if (iep->plat_data->flags & ICSS_IEP_64BIT_COUNTER_SUPPORT)
 		ts_hi = icss_iep_readl(iep, ICSS_IEP_COUNT_REG1);
 
+	ptp_read_system_prets(sts);
 	ts_lo = icss_iep_readl(iep, ICSS_IEP_COUNT_REG0);
-
+	ptp_read_system_postts(sts);
 	if (iep->plat_data->flags & ICSS_IEP_64BIT_COUNTER_SUPPORT)
 		ts_hi1 = icss_iep_readl(iep, ICSS_IEP_COUNT_REG1);
 
-	if (ts_hi != ts_hi1)
+	if (ts_hi != ts_hi1) {
+		ptp_read_system_prets(sts);
 		ts_lo = icss_iep_readl(iep, ICSS_IEP_COUNT_REG0);
+		ptp_read_system_postts(sts);
+	}
 
 	local_irq_restore(flags);
 
@@ -395,7 +400,7 @@ static int icss_iep_ptp_adjtime(struct ptp_clock_info *ptp, s64 delta)
 	if (iep->ops && iep->ops->adjtime) {
 		iep->ops->adjtime(iep->clockops_data, delta);
 	} else {
-		ns = icss_iep_gettime(iep);
+		ns = icss_iep_gettime(iep, NULL);
 		ns += delta;
 		icss_iep_settime(iep, ns);
 	}
@@ -404,14 +409,15 @@ static int icss_iep_ptp_adjtime(struct ptp_clock_info *ptp, s64 delta)
 	return 0;
 }
 
-static int icss_iep_ptp_gettime(struct ptp_clock_info *ptp,
-				struct timespec64 *ts)
+static int icss_iep_ptp_gettimeex(struct ptp_clock_info *ptp,
+				  struct timespec64 *ts,
+				  struct ptp_system_timestamp *sts)
 {
 	struct icss_iep *iep = container_of(ptp, struct icss_iep, ptp_info);
 	u64 ns;
 
 	mutex_lock(&iep->ptp_clk_mutex);
-	ns = icss_iep_gettime(iep);
+	ns = icss_iep_gettime(iep, sts);
 	*ts = ns_to_timespec64(ns);
 	mutex_unlock(&iep->ptp_clk_mutex);
 
@@ -437,7 +443,7 @@ static void icss_iep_update_to_next_boundary(struct icss_iep *iep, u64 start_ns)
 	u64 ns, p_ns;
 	u32 offset;
 
-	ns = icss_iep_gettime(iep);
+	ns = icss_iep_gettime(iep, NULL);
 	if (start_ns < ns)
 		start_ns = ns;
 	p_ns = iep->period;
@@ -644,7 +650,7 @@ static int icss_iep_pps_enable(struct icss_iep *iep, int on)
 
 	rq.perout.index = 0;
 	if (on) {
-		ns = icss_iep_gettime(iep);
+		ns = icss_iep_gettime(iep, NULL);
 		ts = ns_to_timespec64(ns);
 		rq.perout.period.sec = 1;
 		rq.perout.period.nsec = 0;
@@ -723,7 +729,7 @@ static struct ptp_clock_info icss_iep_ptp_info = {
 	.max_adj	= 10000000,
 	.adjfreq	= icss_iep_ptp_adjfreq,
 	.adjtime	= icss_iep_ptp_adjtime,
-	.gettime64	= icss_iep_ptp_gettime,
+	.gettimex64	= icss_iep_ptp_gettimeex,
 	.settime64	= icss_iep_ptp_settime,
 	.enable		= icss_iep_ptp_enable,
 };
-- 
2.17.1

