From de5f75a04484d9715f1612041770959d84a6cf88 Mon Sep 17 00:00:00 2001
From: Grygorii Strashko <grygorii.strashko@ti.com>
Date: Fri, 9 Apr 2021 15:13:54 +0300
Subject: [PATCH 33/35] HACK: irqchip: irq-pruss-intc: fix processing of level
 irqs

It was discovered that IEP pr1_iep_tim_cap_cmp_pend IRQ (7:7:8) is always
triggered twice when PPS is generated and CMP hit event detected by IEP.

The problem is:
pruss_intc_irq_handler
 generic_handle_irq
  handle_level_irq
    mask_ack_irq -> IRQ 7 masked and asked in INTC,
                    but it's not yet cleared on HW level
    handle_irq_event()
      <threaded on RT>
         icss_iep_cap_cmp_handler() -> here IRQ 7 is actually processed in HW
      irq_finalize_oneshot()
       unmask_irq()
         pruss_intc_irq_unmask() -> here IRQ 7 status is observed as still set

The solution is to actually ask Level 7 IRQs from pruss_intc_irq_unmask()
when IRQ source is cleared in HW.

Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
---
 drivers/irqchip/irq-pruss-intc.c | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/drivers/irqchip/irq-pruss-intc.c b/drivers/irqchip/irq-pruss-intc.c
index 41ea9592bfd4..041edfe800ab 100644
--- a/drivers/irqchip/irq-pruss-intc.c
+++ b/drivers/irqchip/irq-pruss-intc.c
@@ -469,7 +469,8 @@ static void pruss_intc_irq_ack(struct irq_data *data)
 	struct pruss_intc *intc = irq_data_get_irq_chip_data(data);
 	unsigned int hwirq = data->hwirq;
 
-	pruss_intc_check_write(intc, PRU_INTC_SICR, hwirq);
+	if (hwirq != 7)
+		pruss_intc_check_write(intc, PRU_INTC_SICR, hwirq);
 }
 
 static void pruss_intc_irq_mask(struct irq_data *data)
@@ -485,7 +486,12 @@ static void pruss_intc_irq_unmask(struct irq_data *data)
 	struct pruss_intc *intc = irq_data_get_irq_chip_data(data);
 	unsigned int hwirq = data->hwirq;
 
+	if (hwirq == 7)
+		pruss_intc_check_write(intc, PRU_INTC_SICR, hwirq);
 	pruss_intc_check_write(intc, PRU_INTC_EISR, hwirq);
+	pr_debug("unmask INTChwirq:%d %08x %08x\n", hwirq,
+			pruss_intc_read_reg(intc, PRU_INTC_SRSR(1)),
+			pruss_intc_read_reg(intc, PRU_INTC_SRSR(0)));
 }
 
 static int pruss_intc_irq_reqres(struct irq_data *data)
@@ -639,6 +645,11 @@ static void pruss_intc_irq_handler(struct irq_desc *desc)
 
 	i += MIN_PRU_HOST_INT;
 
+	pr_debug("INTC:%d %08x %08x %08x %08x \n", i,
+			pruss_intc_read_reg(intc, PRU_INTC_SRSR(1)),
+			pruss_intc_read_reg(intc, PRU_INTC_SRSR(0)),
+			pruss_intc_read_reg(intc, PRU_INTC_SECR(1)),
+			pruss_intc_read_reg(intc, PRU_INTC_SECR(0)));
 	/* get highest priority pending PRUSS system event */
 	hipir = pruss_intc_read_reg(intc, PRU_INTC_HIPIR(i));
 	while (!(hipir & INTC_HIPIR_NONE_HINT)) {
-- 
2.17.1

