From 5ba5960c413e1a2a06e5081333121e10aa3cc1a7 Mon Sep 17 00:00:00 2001
From: Grygorii Strashko <grygorii.strashko@ti.com>
Date: Thu, 15 Apr 2021 20:37:39 +0300
Subject: [PATCH 34/35] net: ethernet: prueth: convert hsr/prp irq to threaded
 handler

Convert hsr/prp irq to use threaded handler.

Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
---
 drivers/net/ethernet/ti/prueth.h      | 11 -----
 drivers/net/ethernet/ti/prueth_core.c | 23 +---------
 drivers/net/ethernet/ti/prueth_lre.c  | 66 ++++++++-------------------
 drivers/net/ethernet/ti/prueth_lre.h  |  2 -
 4 files changed, 20 insertions(+), 82 deletions(-)

diff --git a/drivers/net/ethernet/ti/prueth.h b/drivers/net/ethernet/ti/prueth.h
index a01147dcc7bb..01850d6ccf54 100644
--- a/drivers/net/ethernet/ti/prueth.h
+++ b/drivers/net/ethernet/ti/prueth.h
@@ -435,9 +435,6 @@ struct prueth {
 	/* HSR-PRP */
 	bool support_lre;
 	struct prueth_ndev_priority *hp, *lp;
-	/* NAPI for lp and hp queue scans */
-	struct napi_struct napi_lpq;
-	struct napi_struct napi_hpq;
 	int rx_lpq_irq;
 	int rx_hpq_irq;
 	unsigned int hsr_mode;
@@ -493,14 +490,6 @@ irqreturn_t prueth_ptp_tx_irq_work(int irq, void *dev);
 
 extern const struct prueth_queue_desc queue_descs[][NUM_QUEUES];
 
-static inline void emac_finish_napi(struct prueth_emac *emac,
-				    struct napi_struct *napi,
-				    int irq)
-{
-	napi_complete(napi);
-	enable_irq(irq);
-}
-
 void emac_mc_filter_bin_allow(struct prueth_emac *emac, u8 hash);
 void emac_mc_filter_bin_disallow(struct prueth_emac *emac, u8 hash);
 u8 emac_get_mc_hash(u8 *mac, u8 *mask);
diff --git a/drivers/net/ethernet/ti/prueth_core.c b/drivers/net/ethernet/ti/prueth_core.c
index 08963c73df27..5d3fcbd94623 100644
--- a/drivers/net/ethernet/ti/prueth_core.c
+++ b/drivers/net/ethernet/ti/prueth_core.c
@@ -1736,14 +1736,6 @@ static int emac_ndo_open(struct net_device *ndev)
 	if (ret)
 		goto iep_exit;
 
-	if (!PRUETH_IS_EMAC(prueth) && !PRUETH_IS_SWITCH(prueth)) {
-		/* HSR/PRP. Enable NAPI when first port is initialized */
-		if (!prueth->emac_configured) {
-			napi_enable(&prueth->napi_hpq);
-			napi_enable(&prueth->napi_lpq);
-		}
-	}
-
 	/* start PHY */
 	phy_start(emac->phydev);
 
@@ -1809,8 +1801,6 @@ static int emac_ndo_stop(struct net_device *ndev)
 			hrtimer_cancel(&prueth->tbl_check_timer);
 			kthread_cancel_work_sync(&prueth->nt_work);
 			kthread_destroy_worker(prueth->nt_kworker);
-			napi_disable(&prueth->napi_lpq);
-			napi_disable(&prueth->napi_hpq);
 		}
 	}
 
@@ -3007,12 +2997,8 @@ static int prueth_netdev_init(struct prueth *prueth,
 		ndev->lredev_ops = &prueth_lredev_ops;
 #endif
 
-	/* for HSR/PRP,  register napi for port 1 */
+	/* for HSR/PRP */
 	if (prueth->support_lre && emac->port_id == PRUETH_PORT_MII0) {
-		netif_napi_add(ndev, &prueth->napi_hpq,
-			       prueth_lre_napi_poll_hpq, EMAC_POLL_WEIGHT);
-		netif_napi_add(ndev, &prueth->napi_lpq,
-			       prueth_lre_napi_poll_lpq, EMAC_POLL_WEIGHT);
 		prueth->hp->ndev = ndev;
 		prueth->hp->priority = 0;
 		prueth->lp->ndev = ndev;
@@ -3043,13 +3029,6 @@ static void prueth_netdev_exit(struct prueth *prueth,
 
 	phy_disconnect(emac->phydev);
 
-	if (!PRUETH_IS_EMAC(prueth) && !PRUETH_IS_SWITCH(prueth)) {
-		if (prueth->support_lre &&
-		    emac->port_id == PRUETH_PORT_MII0) {
-			netif_napi_del(&prueth->napi_hpq);
-			netif_napi_del(&prueth->napi_lpq);
-		}
-	}
 	prueth->emac[mac] = NULL;
 }
 
diff --git a/drivers/net/ethernet/ti/prueth_lre.c b/drivers/net/ethernet/ti/prueth_lre.c
index cadd3cfde23b..77ee2e3a1e3c 100644
--- a/drivers/net/ethernet/ti/prueth_lre.c
+++ b/drivers/net/ethernet/ti/prueth_lre.c
@@ -630,7 +630,7 @@ static void nt_updater(struct kthread_work *work)
 }
 
 static int prueth_lre_emac_rx_packets(struct prueth_emac *emac,
-				      int quota, u8 qid1, u8 qid2)
+				      u8 qid1, u8 qid2)
 {
 	struct prueth *prueth = emac->prueth;
 	void *ocmc_ram = (__force void *)prueth->mem[PRUETH_MEM_OCMC].va;
@@ -666,6 +666,7 @@ static int prueth_lre_emac_rx_packets(struct prueth_emac *emac,
 	rxqueue = &sw_queue_infos[PRUETH_PORT_HOST][qid1];
 	rxqueue_o = &sw_queue_infos[PRUETH_PORT_HOST][qid2];
 
+retry:
 	overflow_cnt = readb(&queue_desc->overflow_cnt);
 	overflow_cnt_o = readb(&queue_desc_o->overflow_cnt);
 
@@ -765,7 +766,7 @@ static int prueth_lre_emac_rx_packets(struct prueth_emac *emac,
 			ret = emac_rx_packet(emac_p, &update_rd_ptr,
 					     *pkt_info_p, rxqueue_p);
 			if (ret)
-				return ret;
+				return IRQ_HANDLED;
 
 			used++;
 		}
@@ -788,63 +789,34 @@ static int prueth_lre_emac_rx_packets(struct prueth_emac *emac,
 
 		port0_q_empty = (bd_rd_ptr == bd_wr_ptr) ? 1 : 0;
 		port1_q_empty = (bd_rd_ptr_o == bd_wr_ptr_o) ? 1 : 0;
-
-		/* all we have room for? */
-		if (used >= quota)
-			return used;
 	}
 
-	return used;
-}
-
-int prueth_lre_napi_poll_lpq(struct napi_struct *napi, int budget)
-{
-	struct prueth *prueth = container_of(napi, struct prueth, napi_lpq);
-	struct net_device *ndev = prueth->lp->ndev;
-	struct prueth_emac *emac = netdev_priv(ndev);
-	u8 qid1 = PRUETH_QUEUE2, qid2 = PRUETH_QUEUE4;
-	int num_rx_packets;
-
-	num_rx_packets = prueth_lre_emac_rx_packets(emac, budget, qid1, qid2);
-	if (num_rx_packets < budget)
-		emac_finish_napi(emac, napi, prueth->rx_lpq_irq);
+	if (used) {
+		used = 0;
+		goto retry;
+	}
 
-	return num_rx_packets;
+	return IRQ_HANDLED;
 }
 
-int prueth_lre_napi_poll_hpq(struct napi_struct *napi, int budget)
+irqreturn_t prueth_lre_emac_rx_hardirq_lp(int irq, void *dev_id)
 {
-	struct prueth *prueth = container_of(napi, struct prueth, napi_hpq);
-	struct net_device *ndev = prueth->hp->ndev;
+	struct prueth_ndev_priority *ndev_prio =
+		(struct prueth_ndev_priority *)dev_id;
+	struct net_device *ndev = ndev_prio->ndev;
 	struct prueth_emac *emac = netdev_priv(ndev);
-	u8 qid1 = PRUETH_QUEUE1, qid2 = PRUETH_QUEUE3;
-	int num_rx_packets;
 
-	num_rx_packets = prueth_lre_emac_rx_packets(emac, budget, qid1, qid2);
-	if (num_rx_packets < budget)
-		emac_finish_napi(emac, napi, prueth->rx_hpq_irq);
-
-	return num_rx_packets;
+	return prueth_lre_emac_rx_packets(emac, PRUETH_QUEUE2, PRUETH_QUEUE4);
 }
 
-irqreturn_t prueth_lre_emac_rx_hardirq(int irq, void *dev_id)
+irqreturn_t prueth_lre_emac_rx_hardirq_hp(int irq, void *dev_id)
 {
 	struct prueth_ndev_priority *ndev_prio =
 		(struct prueth_ndev_priority *)dev_id;
 	struct net_device *ndev = ndev_prio->ndev;
 	struct prueth_emac *emac = netdev_priv(ndev);
-	struct prueth *prueth = emac->prueth;
 
-	/* disable Rx system event */
-	if (ndev_prio->priority == 1) {
-		disable_irq_nosync(prueth->rx_lpq_irq);
-		napi_schedule(&prueth->napi_lpq);
-	} else {
-		disable_irq_nosync(prueth->rx_hpq_irq);
-		napi_schedule(&prueth->napi_hpq);
-	}
-
-	return IRQ_HANDLED;
+	return prueth_lre_emac_rx_packets(emac, PRUETH_QUEUE1, PRUETH_QUEUE3);
 }
 
 int prueth_lre_request_irqs(struct prueth_emac *emac)
@@ -869,15 +841,15 @@ int prueth_lre_request_irqs(struct prueth_emac *emac)
 	if (prueth->emac_configured)
 		return 0;
 
-	ret = request_irq(prueth->rx_hpq_irq, prueth_lre_emac_rx_hardirq,
-			  IRQF_TRIGGER_HIGH, "eth_hp_int", prueth->hp);
+	ret = request_threaded_irq(prueth->rx_hpq_irq, NULL, prueth_lre_emac_rx_hardirq_hp,
+			  IRQF_TRIGGER_HIGH | IRQF_ONESHOT, "eth_hp_int", prueth->hp);
 	if (ret) {
 		netdev_err(emac->ndev, "unable to request RX HPQ IRQ\n");
 		goto free_ptp_irq;
 	}
 
-	ret = request_irq(prueth->rx_lpq_irq, prueth_lre_emac_rx_hardirq,
-			  IRQF_TRIGGER_HIGH, "eth_lp_int", prueth->lp);
+	ret = request_threaded_irq(prueth->rx_lpq_irq, NULL, prueth_lre_emac_rx_hardirq_lp,
+			  IRQF_TRIGGER_HIGH | IRQF_ONESHOT, "eth_lp_int", prueth->lp);
 	if (ret) {
 		netdev_err(emac->ndev, "unable to request RX LPQ IRQ\n");
 		goto free_rx_hpq_irq;
diff --git a/drivers/net/ethernet/ti/prueth_lre.h b/drivers/net/ethernet/ti/prueth_lre.h
index 78d798881003..9ff3be4ffb24 100644
--- a/drivers/net/ethernet/ti/prueth_lre.h
+++ b/drivers/net/ethernet/ti/prueth_lre.h
@@ -192,8 +192,6 @@ void prueth_lre_set_stats(struct prueth *prueth,
 void prueth_lre_get_stats(struct prueth *prueth,
 			  struct lre_statistics *pstats);
 void prueth_lre_config_check_flags(struct prueth *prueth);
-int prueth_lre_napi_poll_lpq(struct napi_struct *napi, int budget);
-int prueth_lre_napi_poll_hpq(struct napi_struct *napi, int budget);
 void prueth_lre_free_memory(struct prueth *prueth);
 void prueth_lre_process_check_flags_event(struct prueth *prueth);
 int prueth_lre_nt_insert(struct prueth *prueth,
-- 
2.17.1

